#
# Copyright the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Angular
concurrency:
  # Group PRs by head_ref, push to main branch by commit id, and others branch by ref.
  group: ${{ github.workflow }}-${{ github.head_ref || (github.ref == 'refs/heads/main' && github.sha) || github.ref }}
  cancel-in-progress: true
on:
  push:
    branches:
      - 'main'
      - '**maintenance'
    paths-ignore:
      - 'package*.json'
  pull_request:
    types: [closed, opened, synchronize, reopened]
    branches:
      - '*'
env:
  FORCE_COLOR: 2
jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
      client: ${{ steps.build.outputs.client }}
      server: ${{ steps.build.outputs.server }}
      any: ${{ steps.build.outputs.any }}
      workflow-angular: ${{ steps.build.outputs.workflow-angular }}
      workflow-react: ${{ steps.build.outputs.workflow-react }}
      workflow-vue: ${{ steps.build.outputs.workflow-vue }}
    steps:
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v5
        with:
          repository: 'jhipster/generator-jhipster'
          path: generator-jhipster
      - run: npm ci --ignore-scripts
        working-directory: ${{ github.workspace }}/generator-jhipster
      - name: 'Build matrix'
        id: build
        run: generator-jhipster/bin/jhipster.cjs github-build-matrix angular
  applications:
    name: ${{ matrix.job-name }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    needs: build-matrix
    defaults:
      run:
        working-directory: ${{ github.workspace }}/app
    if: >-
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[ci skip]') &&
      github.event.action != 'closed' &&
      !contains(github.event.pull_request.labels.*.name, 'pr: skip-ci') &&
      fromJson(needs.build-matrix.outputs.matrix).include[0] != null
    timeout-minutes: 50
    strategy:
      fail-fast: false
      # Matrix available at https://github.com/jhipster/generator-jhipster/tree/main/test-integration/workflow-samples/
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    steps:
      #----------------------------------------------------------------------
      # Install all tools and check configuration
      #----------------------------------------------------------------------
      - name: 'SETUP: Checkout jhipster-bom'
        uses: actions/checkout@v5
        with:
          path: jhipster-bom
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v5
        with:
          repository: 'jhipster/generator-jhipster'
          path: generator-jhipster
          fetch-depth: 2
      - uses: jhipster/actions/setup-runner@v0
        with:
          node-version: ${{ matrix.node-version }}
          java-version: ${{ matrix.java-version }}
          npm-version: ${{ matrix.npm-version }}
          maven-cache: true
          gradle-cache: ${{ matrix.gradle-cache }}
          binary-dir: ${{ github.workspace }}/generator-jhipster/bin
      #----------------------------------------------------------------------
      # Install JHipster and generate project+entities
      #----------------------------------------------------------------------
      - run: npm ci --ignore-scripts
        working-directory: ${{ github.workspace }}/generator-jhipster
      - name: 'GENERATION: project'
        run: jhipster.cjs generate-sample ${{ matrix.sample }} --skip-jhipster-dependencies --skip-checks --no-insight
        env:
          JHI_FOLDER_APP: ${{ github.workspace }}/app
          JHIPSTER_DEPENDENCIES_VERSION: '0.0.0-CICD'
          JHI_JWT_SECRET_KEY: ${{ matrix.jwt-secret-key }}
      - run: jhipster.cjs info
      #----------------------------------------------------------------------
      # Launch tests
      #----------------------------------------------------------------------
      - uses: jhipster/actions/build-jhipster-bom@v0
      - name: 'TESTS: backend'
        id: backend
        run: npm run ci:backend:test
        continue-on-error: ${{matrix.continue-on-backend-tests-error || false}}
        timeout-minutes: 15
      - name: 'TESTS: packaging'
        run: npm run ci:e2e:package
        timeout-minutes: 12
      - name: 'TESTS: Start docker compose containers for e2e tests'
        run: npm run ci:e2e:prepare
        timeout-minutes: 5
      - name: 'E2E: Run'
        id: e2e
        run: npm run ci:e2e:run --if-present
        timeout-minutes: 15
      - name: 'BACKEND: Store failure logs'
        uses: actions/upload-artifact@v4
        if: always() && steps.backend.outcome == 'failure'
        with:
          name: log-${{ matrix.sample }}
          path: ${{ github.workspace }}/app/**/test-results/**/*.xml
      - name: 'E2E: Store failure screenshots'
        uses: actions/upload-artifact@v4
        if: always() && steps.e2e.outcome == 'failure'
        with:
          name: screenshots-${{ matrix.sample }}
          path: ${{ github.workspace }}/app/**/cypress/screenshots
      - name: Dump docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
  check-angular:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [applications]
    if: always()
    steps:
      - run: |
          echo '${{ toJSON(needs) }}'
          if [ 'skipped' == '${{ needs.applications.result }}' ] || [ 'success' == '${{ needs.applications.result }}' ] || [ 'closed' == '${{ github.event.action }}' ]; then
            exit 0
          fi
          exit 1
